{"version":3,"sources":["components/Header.js","components/Parallax.js","components/Description.js","components/Character.js","components/Score.js","components/Game.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Parallax","src","alt","Description","Character","props","onClick","handleClick","id","image","Score","message","score","highScore","Game","state","characters","componentDidMount","_this","setState","sort","Math","random","findIndex","i","clicked","stateCopy","Object","assign","slice","_this2","this","components_Score","map","character","components_Character","key","Component","Footer","App","components_Header","components_Parallax","components_Description","components_Game","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4cb53c4d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n  return (\n    <nav>\n      <div className=\"nav-wrapper indigo\">\n        <a href=\"/\" className=\"brand-logo center\">Clicky Game</a>\n        {/* Add counter below */}\n      </div>\n    </nav>    \n  );\n}\n\nexport default Header;  ","import React from 'react';\n\nconst Parallax = () => {\n  return (\n    <div className=\"parallax-container\">\n      <div className=\"parallax\">\n        <img src=\"https://images7.alphacoders.com/914/914659.jpg\" alt=\"spongebob\" />\n      </div>\n    </div>   \n  );\n}\n\nexport default Parallax;  ","import React from 'react';\n\nconst Description = () => {\n  return (\n    <div className=\"container\">\n      <h3>Click An Image To Begin!</h3>\n      <p className=\"flow-text\">Click any image to begin but don't click the same image twice</p>\n    </div>\n  );\n}\n\nexport default Description;  ","import React from 'react';\n\nconst Character = (props) => {\n  return (\n    <div className=\"col s3\" onClick={() => props.handleClick(props.id)}>\n      <div className=\"card-panel \">\n        <div className=\"card-image valign-wrapper\">\n          <img \n            src={props.image}\n            alt=\"Character\"\n          />\n        </div>\n      </div>\n    </div>    \n  )\n}\n\nexport default Character;","import React from 'react';\n\nconst Score = props => {\n  return (\n    <div className=\"row\">\n      <div className=\"col s12 m4\">\n        <p className=\"flow-text\">{props.message}</p>\n        <ul className=\"collection\">  \n          <li className=\"collection-item\">Score: <span className=\"badge orange white-text\">{props.score}</span></li>\n          <li className=\"collection-item\">High Score: <span className=\"badge green white-text\">{props.highScore}</span></li>\n        </ul>         \n      </div>\n    </div>\n  )\n}\n\nexport default Score;","import React, {Component} from 'react';\nimport Character from './Character';\nimport Score from './Score';\nimport characters from '../characters.json';\nimport './style.css';\n\nclass Game extends Component {\n  state = {\n    characters: characters,\n    score:  0,\n    highScore: 0\n  }\n\n  componentDidMount = () => {\n    this.setState({\n      characters: this.state.characters.sort(() => 0.5 - Math.random())\n    });\n  }\n\n  handleClick = id => {\n    // get the index location of object \n    id = this.state.characters.findIndex(i => i.id === id);\n\n    // check if image has been clicked.\n    if(this.state.characters[id].clicked) {\n      // end game!!\n      this.setState({\n        message: \"You guessed incorrectly!! Try again!!!\"\n      })\n\n      // check if current score is greater then high score\n      if(this.state.score > this.state.highScore) {\n        this.setState({\n          score: 0,\n          highScore: this.state.score\n        })\n      } else {\n        this.setState({\n          score: 0,\n          characters: characters\n        })\n      }\n    } else {\n\n      // if all 12 pictures have been clicked user wins!\n      if(this.state.score === 12) {\n        \n      }\n\n      // get state's copy and reassign it when user clicks on an image\n      let stateCopy = Object.assign({}, this.state);\n      stateCopy.characters = stateCopy.characters.slice();\n      stateCopy.characters[id] = Object.assign({}, stateCopy.characters[id]);\n\n      // set the image state to clicked\n      stateCopy.characters[id].clicked = true;\n      stateCopy.score += 1 // add 1 to score\n\n      // notify user guessed correctly\n      stateCopy.message = \"You guessed correctly!!\"\n\n      // put images in random order\n      stateCopy.characters =  stateCopy.characters.sort(() => 0.5 - Math.random());\n\n      // set the new state\n      this.setState(stateCopy);\n    }\n  }\n\n  render () {\n    return (\n      <div className=\"container\">\n        <Score \n          score = {this.state.score}\n          highScore = {this.state.highScore}\n          message = {this.state.message}\n        />\n        <div className=\"row\">\n          {this.state.characters.map(character => {\n            return (\n              <Character \n                image={character.image} \n                key={character.id} \n                handleClick={this.handleClick}\n                id={character.id}\n              />\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Game;  ","import React from 'react';\n\nconst Footer = ()  => {\n  return (\n    <div className=\"page-footer indigo\">\n\n      <div className=\"footer-copyright\">\n        <div className=\"container\">\n          &copy; Clicky Game \n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Parallax from './components/Parallax';\nimport Description from './components/Description';\nimport Game from './components/Game';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Parallax />\n        <Description />\n        <Game />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}